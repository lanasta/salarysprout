{"ast":null,"code":"var _classCallCheck = require(\"/Users/aslalamentik/Desktop/salarysprout/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/aslalamentik/Desktop/salarysprout/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar address = require(\"./encoding/address\");\n\nvar encoding = require(\"./encoding/encoding\");\n\nvar nacl = require(\"./nacl/naclWrappers\");\n\nvar utils = require(\"./utils/utils\");\n/**\n * Bid enables construction of Algorand Auctions Bids\n * */\n\n\nvar Bid =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Bid(_ref) {\n    var bidderKey = _ref.bidderKey,\n        bidAmount = _ref.bidAmount,\n        maxPrice = _ref.maxPrice,\n        bidID = _ref.bidID,\n        auctionKey = _ref.auctionKey,\n        auctionID = _ref.auctionID;\n\n    _classCallCheck(this, Bid);\n\n    this.name = \"Bid\";\n    this.tag = Buffer.from([97, 66]); // \"aB\"\n\n    bidderKey = address.decode(bidderKey);\n    auctionKey = address.decode(auctionKey);\n    if (!Number.isSafeInteger(bidAmount) || bidAmount < 0) throw Error(\"Bid amount must be positive and 2^53-1\");\n    if (!Number.isSafeInteger(bidID) || bidID < 0) throw Error(\"BidID must be positive and 2^53-1\");\n    if (!Number.isSafeInteger(auctionID) || auctionID < 0) throw Error(\"auctionID must be positive\");\n    Object.assign(this, {\n      bidderKey: bidderKey,\n      auctionKey: auctionKey,\n      bidAmount: bidAmount,\n      maxPrice: maxPrice,\n      bidID: bidID,\n      auctionID: auctionID\n    });\n  }\n\n  _createClass(Bid, [{\n    key: \"get_obj_for_encoding\",\n    value: function get_obj_for_encoding() {\n      return {\n        \"bidder\": Buffer.from(this.bidderKey.publicKey),\n        \"cur\": this.bidAmount,\n        \"price\": this.maxPrice,\n        \"id\": this.bidID,\n        \"auc\": Buffer.from(this.auctionKey.publicKey),\n        \"aid\": this.auctionID\n      };\n    }\n  }, {\n    key: \"signBid\",\n    value: function signBid(sk) {\n      var encodedMsg = encoding.encode(this.get_obj_for_encoding());\n      var toBeSigned = Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n      var sig = nacl.sign(toBeSigned, sk); // construct signed message\n\n      var sBid = {\n        \"sig\": Buffer.from(sig),\n        \"bid\": this.get_obj_for_encoding()\n      };\n      var note = {\n        \"t\": \"b\",\n        \"b\": sBid\n      };\n      return new Uint8Array(encoding.encode(note));\n    }\n  }]);\n\n  return Bid;\n}();\n\nmodule.exports = {\n  Bid: Bid\n};","map":null,"metadata":{},"sourceType":"script"}