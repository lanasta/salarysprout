{"ast":null,"code":"/**\n * This file is a wrapper of msgpack.js.\n * The wrapper was written in order to ensure correct encoding of Algorand Transaction and other formats.\n * In particular, it matches go-algorand blockchain client, written in go (https://www.github.com/algorand/go-algorand.\n * Algorand's msgpack encoding follows to following rules -\n *  1. Every integer must be encoded to the smallest type possible (0-255->8bit, 256-65535->16bit, etx)\n *  2. All fields names must be sorted\n *  3. All empty and 0 fields should be omitted\n *  4. Every positive number must be encoded as uint\n *  5. Binary blob should be used for binary data and string for strings\n *  */\nvar msgpack = require(\"@msgpack/msgpack\"); // Errors\n\n\nvar ERROR_CONTAINS_EMPTY = new Error(\"The object contains empty or 0 values\");\n/**\n * containsEmpty returns true if any of the object's values are empty, false otherwise.\n * Empty arrays considered empty\n * @param obj\n * @returns {boolean} true if contains empty, false otherwise\n */\n\nfunction containsEmpty(obj) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (!obj[key] || obj[key].length === 0) return true;\n    }\n  }\n\n  return false;\n}\n/**\n * ecnode encodes objects using msgpack\n * @param obj a dictionary to be encoded. Must not contain empty or 0 values.\n * @returns {Uint8Array} msgpack representation of the object\n * @throws ERROR_CONTAINS_EMPTY if the object contains empty or zero values\n */\n\n\nfunction encode(obj) {\n  // Check for empty values\n  if (containsEmpty(obj)) {\n    throw ERROR_CONTAINS_EMPTY;\n  } // enable the canonical option\n\n\n  var options = {\n    sortKeys: true\n  };\n  return msgpack.encode(obj, options);\n}\n\nfunction decode(obj) {\n  return msgpack.decode(obj);\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  ERROR_CONTAINS_EMPTY: ERROR_CONTAINS_EMPTY\n};","map":null,"metadata":{},"sourceType":"script"}