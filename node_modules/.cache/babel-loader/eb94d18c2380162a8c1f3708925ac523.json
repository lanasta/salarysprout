{"ast":null,"code":"const client = require('./client');\n\nconst txn = require(\"../transaction\");\n\nfunction Kmd(token, baseServer = \"http://127.0.0.1\", port = 7833) {\n  // Get client\n  let c = new client.HTTPClient({\n    'X-KMD-API-Token': token\n  }, baseServer, port);\n  /**\n   * version returns a VersionResponse containing a list of kmd API versions supported by this running kmd instance.\n   * @returns {Promise<*>}\n   */\n\n  this.versions = async function () {\n    let res = await c.get(\"/versions\");\n    return res.body;\n  };\n  /**\n   * listWallets returns a ListWalletsResponse containing the list of wallets known to kmd. Using a wallet ID\n   * returned from this endpoint, you can initialize a wallet handle with client.InitWalletHandle\n   * @returns {Promise<*>}\n   */\n\n\n  this.listWallets = async function () {\n    let res = await c.get(\"/v1/wallets\");\n    return res.body;\n  };\n  /**\n   * createWallet creates a wallet with the specified name, password, driver,\n   * and master derivation key. If the master derivation key is blank, one is\n   * generated internally to kmd. CreateWallet returns a CreateWalletResponse\n   * containing information about the new wallet.\n   * @param walletName\n   * @param walletPassword\n   * @param walletDriverName\n   * @param walletMDK\n   * @returns {Promise<*>}\n   */\n\n\n  this.createWallet = async function (walletName, walletPassword, walletMDK = \"\", walletDriverName = \"sqlite\") {\n    let req = {\n      \"wallet_name\": walletName,\n      \"wallet_driver_name\": walletDriverName,\n      \"wallet_password\": walletPassword,\n      \"master_derivation_key\": Buffer.from(walletMDK).toString('base64')\n    };\n    let res = await c.post(\"/v1/wallet\", req);\n    return res.body;\n  };\n  /**\n   * initWalletHandle accepts a wallet ID and a wallet password, and returns an\n   * initWalletHandleResponse containing a wallet handle token. This wallet\n   * handle token can be used for subsequent operations on this wallet, like key\n   * generation, transaction signing, etc.. WalletHandleTokens expire after a\n   * configurable number of seconds, and must be renewed periodically with\n   * RenewWalletHandle. It is good practice to call ReleaseWalletHandle when\n   * you're done interacting with this wallet.\n   * @param walletID\n   * @param walletPassword\n   * @returns {Promise<*>}\n   */\n\n\n  this.initWalletHandle = async function (walletID, walletPassword) {\n    let req = {\n      \"wallet_id\": walletID,\n      \"wallet_password\": walletPassword\n    };\n    let res = await c.post(\"/v1/wallet/init\", req);\n    return res.body;\n  };\n  /**\n   * releaseWalletHandle invalidates the passed wallet handle token, making\n   * it unusuable for subsequent wallet operations.\n   * @param walletHandle\n   * @returns {Promise<*>}\n   */\n\n\n  this.releaseWalletHandle = async function (walletHandle) {\n    let req = {\n      \"wallet_handle_token\": walletHandle\n    };\n    let res = await c.post(\"/v1/wallet/release\", req);\n    return res.body;\n  };\n  /**\n   * renewWalletHandle accepts a wallet handle and attempts to renew it, moving\n   * the expiration time to some number of seconds in the future. It returns a\n   * RenewWalletHandleResponse containing the walletHandle and the number of\n   * seconds until expiration\n   * @param walletHandle\n   * @returns {Promise<*>}\n   */\n\n\n  this.renewWalletHandle = async function (walletHandle) {\n    let req = {\n      \"wallet_handle_token\": walletHandle\n    };\n    let res = await c.post(\"/v1/wallet/renew\", req);\n    return res.body;\n  };\n  /**\n   * renameWallet accepts a wallet ID, wallet password, and a new wallet name,\n   * and renames the underlying wallet.\n   * @param walletID\n   * @param walletPassword\n   * @param newWalletName\n   * @returns {Promise<*>}\n   */\n\n\n  this.renameWallet = async function (walletID, walletPassword, newWalletName) {\n    let req = {\n      \"wallet_id\": walletID,\n      \"wallet_password\": walletPassword,\n      \"wallet_name\": newWalletName\n    };\n    let res = await c.post(\"/v1/wallet/rename\", req);\n    return res.body;\n  };\n  /**\n   * getWallet accepts a wallet handle and returns high level information about\n   * this wallet in a GetWalletResponse.\n   * @param walletHandle\n   * @returns {Promise<*>}\n   */\n\n\n  this.getWallet = async function (walletHandle) {\n    let req = {\n      \"wallet_handle_token\": walletHandle\n    };\n    let res = await c.post(\"/v1/wallet/info\", req);\n    return res.body;\n  };\n  /**\n   * exportMasterDerivationKey accepts a wallet handle and a wallet password, and\n   * returns an ExportMasterDerivationKeyResponse containing the master\n   * derivation key. This key can be used as an argument to CreateWallet in\n   * order to recover the keys generated by this wallet. The master derivation\n   * key can be encoded as a sequence of words using the mnemonic library, and\n   * @param walletHandle\n   * @param walletPassword\n   * @returns {Promise<*>}\n   */\n\n\n  this.exportMasterDerivationKey = async function (walletHandle, walletPassword) {\n    let req = {\n      \"wallet_handle_token\": walletHandle,\n      \"wallet_password\": walletPassword\n    };\n    let res = await c.post(\"/v1/master-key/export\", req);\n    return {\n      \"master_derivation_key\": Buffer.from(res.body.master_derivation_key, 'base64')\n    };\n  };\n  /**\n   * importKey accepts a wallet handle and an ed25519 private key, and imports\n   * the key into the wallet. It returns an ImportKeyResponse containing the\n   * address corresponding to this private key.\n   * @param walletHandle\n   * @param secretKey\n   * @returns {Promise<*>}\n   */\n\n\n  this.importKey = async function (walletHandle, secretKey) {\n    let req = {\n      \"wallet_handle_token\": walletHandle,\n      \"private_key\": Buffer.from(secretKey).toString('base64')\n    };\n    let res = await c.post(\"/v1/key/import\", req);\n    return res.body;\n  };\n  /**\n   * exportKey accepts a wallet handle, wallet password, and address, and returns\n   * an ExportKeyResponse containing the ed25519 private key corresponding to the\n   * address stored in the wallet.\n   * @param walletHandle\n   * @param walletPassword\n   * @param addr\n   * @returns {Promise<*>}\n   */\n\n\n  this.exportKey = async function (walletHandle, walletPassword, addr) {\n    let req = {\n      \"wallet_handle_token\": walletHandle,\n      \"address\": addr,\n      \"wallet_password\": walletPassword\n    };\n    let res = await c.post(\"/v1/key/export\", req);\n    return {\n      \"private_key\": Buffer.from(res.body.private_key, 'base64')\n    };\n  };\n  /**\n   * generateKey accepts a wallet handle, and then generates the next key in the\n   * wallet using its internal master derivation key. Two wallets with the same\n   * master derivation key will generate the same sequence of keys.\n   * @param walletHandle\n   * @returns {Promise<*>}\n   */\n\n\n  this.generateKey = async function (walletHandle) {\n    let req = {\n      \"wallet_handle_token\": walletHandle,\n      \"display_mnemonic\": false\n    };\n    let res = await c.post(\"/v1/key\", req);\n    return res.body;\n  };\n  /**\n   * deleteKey accepts a wallet handle, wallet password, and address, and deletes\n   * the information about this address from the wallet (including address and\n   * secret key). If DeleteKey is called on a key generated using GenerateKey,\n   * the same key will not be generated again. However, if a wallet is recovered\n   * using the master derivation key, a key generated in this way can be\n   * recovered.\n   * @param walletHandle\n   * @param walletPassword\n   * @param addr\n   * @returns {Promise<*>}\n   */\n\n\n  this.deleteKey = async function (walletHandle, walletPassword, addr) {\n    let req = {\n      \"wallet_handle_token\": walletHandle,\n      \"address\": addr,\n      \"wallet_password\": walletPassword\n    };\n    let res = await c.delete(\"/v1/key\", req);\n    return res.body;\n  };\n  /**\n   * ListKeys accepts a wallet handle and returns a ListKeysResponse containing\n   * all of the addresses for which this wallet contains secret keys.\n   * @param walletHandle\n   * @returns {Promise<*>}\n   */\n\n\n  this.listKeys = async function (walletHandle) {\n    let req = {\n      \"wallet_handle_token\": walletHandle\n    };\n    let res = await c.post(\"/v1/key/list\", req);\n    return res.body;\n  };\n  /**\n   * signTransaction accepts a wallet handle, wallet password, and a transaction,\n   * and returns and SignTransactionResponse containing an encoded, signed\n   * transaction. The transaction is signed using the key corresponding to the\n   * Sender field.\n   * @param walletHandle\n   * @param walletPassword\n   * @param transaction\n   * @returns {Promise<*>}\n   */\n\n\n  this.signTransaction = async function (walletHandle, walletPassword, transaction) {\n    let tx = new txn.Transaction(transaction);\n    let req = {\n      \"wallet_handle_token\": walletHandle,\n      \"wallet_password\": walletPassword,\n      \"transaction\": tx.toByte().toString('base64')\n    };\n    let res = await c.post(\"/v1/transaction/sign\", req);\n\n    if (res.statusCode === 200) {\n      return Buffer.from(res.body.signed_transaction, 'base64');\n    }\n\n    return res.body;\n  };\n  /**\n   * listMultisig accepts a wallet handle and returns a ListMultisigResponse\n   * containing the multisig addresses whose preimages are stored in this wallet.\n   * A preimage is the information needed to reconstruct this multisig address,\n   * including multisig version information, threshold information, and a list\n   * of public keys.\n   * @param walletHandle\n   * @returns {Promise<*>}\n   */\n\n\n  this.listMultisig = async function (walletHandle) {\n    let req = {\n      \"wallet_handle_token\": walletHandle\n    };\n    let res = await c.post(\"/v1/multisig/list\", req);\n    return res.body;\n  };\n  /**\n   * importMultisig accepts a wallet handle and the information required to\n   * generate a multisig address. It derives this address, and stores all of the\n   * information within the wallet. It returns a ImportMultisigResponse with the\n   * derived address.\n   * @param walletHandle\n   * @param version\n   * @param threshold\n   * @param pks\n   * @returns {Promise<*>}\n   */\n\n\n  this.importMultisig = async function (walletHandle, version, threshold, pks) {\n    let req = {\n      \"wallet_handle_token\": walletHandle,\n      \"multisig_version\": version,\n      \"threshold\": threshold,\n      \"pks\": pks\n    };\n    let res = await c.post(\"/v1/multisig/import\", req);\n    return res.body;\n  };\n  /**\n   * exportMultisig accepts a wallet handle, wallet password, and multisig\n   * address, and returns an ExportMultisigResponse containing the stored\n   * multisig preimage. The preimage contains all of the information necessary\n   * to derive the multisig address, including version, threshold, and a list of\n   * public keys.\n   * @param walletHandle\n   * @param walletPassword\n   * @param addr\n   * @returns {Promise<*>}\n   */\n\n\n  this.exportMultisig = async function (walletHandle, addr) {\n    let req = {\n      \"wallet_handle_token\": walletHandle,\n      \"address\": addr\n    };\n    let res = await c.post(\"/v1/multisig/export\", req);\n    return res.body;\n  };\n  /**\n   * signMultisigTransaction accepts a wallet handle, wallet password,\n   * transaction, public key (*not* an address), and an optional partial\n   * MultisigSig. It looks up the secret key corresponding to the public key, and\n   * returns a SignMultisigTransactionResponse containing a MultisigSig with a\n   * signature by the secret key included.\n   * @param walletHandle\n   * @param pw\n   * @param tx\n   * @param pk\n   * @param partial\n   * @returns {Promise<*>}\n   */\n\n\n  this.signMultisigTransaction = async function (walletHandle, pw, transaction, pk, partial) {\n    let tx = new txn.Transaction(transaction);\n    let req = {\n      \"wallet_handle_token\": walletHandle,\n      \"transaction\": tx.toByte().toString('base64'),\n      \"public_key\": Buffer.from(pk).toString('base64'),\n      \"partial_multisig\": partial,\n      \"wallet_password\": pw\n    };\n    let res = await c.post(\"/v1/multisig/sign\", req);\n    return res.body;\n  };\n  /**\n   * deleteMultisig accepts a wallet handle, wallet password, and multisig\n   * address, and deletes the information about this multisig address from the \n   * wallet (including address and secret key).\n   * @param walletHandle\n   * @param walletPassword\n   * @param addr\n   * @returns {Promise<*>}\n   */\n\n\n  this.deleteMultisig = async function (walletHandle, walletPassword, addr) {\n    let req = {\n      \"wallet_handle_token\": walletHandle,\n      \"address\": addr,\n      \"wallet_password\": walletPassword\n    };\n    let res = await c.delete(\"/v1/multisig\", req);\n    return res.body;\n  };\n}\n\nmodule.exports = {\n  Kmd\n};\nmodule.exports = {\n  Kmd\n};","map":null,"metadata":{},"sourceType":"script"}