{"ast":null,"code":"const address = require(\"./encoding/address\");\n\nconst encoding = require(\"./encoding/encoding\");\n\nconst nacl = require(\"./nacl/naclWrappers\");\n\nconst utils = require(\"./utils/utils\");\n/**\n * Bid enables construction of Algorand Auctions Bids\n * */\n\n\nclass Bid {\n  constructor({\n    bidderKey,\n    bidAmount,\n    maxPrice,\n    bidID,\n    auctionKey,\n    auctionID\n  }) {\n    this.name = \"Bid\";\n    this.tag = Buffer.from([97, 66]); // \"aB\"\n\n    bidderKey = address.decode(bidderKey);\n    auctionKey = address.decode(auctionKey);\n    if (!Number.isSafeInteger(bidAmount) || bidAmount < 0) throw Error(\"Bid amount must be positive and 2^53-1\");\n    if (!Number.isSafeInteger(bidID) || bidID < 0) throw Error(\"BidID must be positive and 2^53-1\");\n    if (!Number.isSafeInteger(auctionID) || auctionID < 0) throw Error(\"auctionID must be positive\");\n    Object.assign(this, {\n      bidderKey,\n      auctionKey,\n      bidAmount,\n      maxPrice,\n      bidID,\n      auctionID\n    });\n  }\n\n  get_obj_for_encoding() {\n    return {\n      \"bidder\": Buffer.from(this.bidderKey.publicKey),\n      \"cur\": this.bidAmount,\n      \"price\": this.maxPrice,\n      \"id\": this.bidID,\n      \"auc\": Buffer.from(this.auctionKey.publicKey),\n      \"aid\": this.auctionID\n    };\n  }\n\n  signBid(sk) {\n    const encodedMsg = encoding.encode(this.get_obj_for_encoding());\n    const toBeSigned = Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n    const sig = nacl.sign(toBeSigned, sk); // construct signed message\n\n    let sBid = {\n      \"sig\": Buffer.from(sig),\n      \"bid\": this.get_obj_for_encoding()\n    };\n    let note = {\n      \"t\": \"b\",\n      \"b\": sBid\n    };\n    return new Uint8Array(encoding.encode(note));\n  }\n\n}\n\nmodule.exports = {\n  Bid\n};","map":null,"metadata":{},"sourceType":"script"}